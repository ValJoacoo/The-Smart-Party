void exit_pro(int milisecons=25, bool set=false)
{
if(set==true)
speak(lang.get_value("Saving the last configuration change")+" ...", true);

speak(lang.get_value("Exiting")+" ...");
fade(music, -50, 25);
exit();
}

void save_settings()
{
f.open("Settings.ini", "w");
f.write("All="+(allvolume+100)+"\r\nMusic="+(musvolume+100)+"\r\nMenu="+(menuvolume+100)+"\r\nReflection="+(time_config/1000)+"\r\nLanguage="+language);
f.close();

if(lang.set_file("Languages/"+language+".lang")==false)
{
alert("Error", "There was an error trying to open the file [Languages/"+language+".lang]. Please contact the developers to solve the problem.");
exit_pro(25, changed_settings);
}

set_sound_master_volume(allvolume);
enter.volume=menuvolume;
movement.volume=menuvolume;
music.volume=musvolume;
wrap.volume=menuvolume;

changed_settings=true;
}

void read_settings()
{
string[] values;
f.open(file_config, "r");
config=string_split(f.read(), "\r\n", false);
f.close();
for(int i=0; i<config.length(); i++)
{

}
if(values.find("All")>-1)
{
allvolume=string_to_number(values[1])-100;
}
if(values.find("Music")>-1)
{
musvolume=string_to_number(values[1])-100;
}
if(values.find("Menu")>-1)
{
menuvolume=string_to_number(values[1])-100;
}
if(values.find("Reflection")>-1)
{
time_config=string_to_number(values[1])*1000;
}
if(values.find("Language")>-1)
{
language=values[1];
}
}

string load_sounds(string filename, string password, bool mode)
{
if(mode)
{
set_sound_decryption_key(password, false);
set_sound_storage(filename);
return "";
}
else
return "Sound/";
}
