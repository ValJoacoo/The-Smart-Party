int option;

class dynamic_menu_pro
{
sound m;
sound r;
sound w;
string[] item;
string[] item_name;
int stance=0;
bool wrap=false;

void add_option(string text, string name=text)
{
item.insert_last(text);
item_name.insert_last(name);
}

int get_item_name(string name="")
{
for(uint items=0; items<item.length(); items++)
{
if(name!=item_name[items])
continue;
else
return option=items+1;
}
return option;
}

int selected_option()
{
return option;
}

void add_wrap_sound(string rute, int volume=-5)
{
w.load(rute);
w.volume=volume;
}
void add_return_sound(string rute, int volume=-5)
{
r.load(rute);
r.volume=volume;
}
void add_movement_sound(string rute, int volume=-5)
{
m.load(rute);
m.volume=volume;
}

int start(string text, bool audio=false)
{
if(audio==true)
{
sound audio_menu;
audio_menu.load(text);
audio_menu.volume=0;
audio_menu.play();
}
else
{
wait(125);
speak(text);
}

while(true)
{
wait(5);

if(key_pressed(KEY_UP))
{
stance--;
if(stance<0)
{
if(wrap==false)
{
stance=0;
w.play();
}
else
stance=item.length()-1;
}
else
m.play();
speak(item[stance]);
}

if(key_pressed(KEY_DOWN))
{
stance++;
if(stance>item.length()-1)
{
if(wrap==false)
{
stance=item.length()-1;
w.play();
}
else
stance=0;
}
else
m.play();
speak(item[stance]);
}

if(key_pressed(KEY_RETURN))
{
r.play();
return option=stance+1;
}

if(key_down(KEY_LMENU) or key_down(KEY_RMENU))
{
if(key_pressed(KEY_F4))
{
return option=-1;
}
}
if(key_pressed(KEY_ESCAPE))
{
return option=0;
}

// Close to while.
}
return option=0;
}

}
