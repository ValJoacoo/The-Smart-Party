// Includes.
#include "Includes/config.bgt"
#include "Includes/Dialog.bgt"
#include "Includes/Dynamic_Menu_Pro.bgt"
#include "Includes/Fade.bgt"
#include "Includes/Main_menu.bgt"
#include "Includes/Multilanguage.bgt"
#include "Includes/Other_functions.bgt"
#include "Includes/Speak.bgt"

// Main function: It includes a check that everything works correctly and the main loop, where are the volume controls and those containing the ALT key.
void main()
{
set_error_output("Log/Errors.log");
show_game_window(game_name+" - "+game_version+type_version);

// If executing has the value true is that the main function has already been called. If it has the false value we verify that everything works correctly before making the program run.
if(executing==false)
{
if(directory_exists("Log")==false)
{
if(directory_create("Log")==false)
{
alert("Error", "I got an error when trying to create the directory [Log]. Please contact the developers to solve this problem.");
exit();
}
}

if(file_exists("Settings.ini")==false)
{
pf.create("Settings.ini");
f.open("Settings.ini", "w");
f.write("All=100\r\nMenu=90\r\nMusic=90\r\nReflection=15\r\nLanguage=English");
f.close();
pf.close();
}

f.open("Settings.ini", "r");
config=string_split(f.read(), "\r\n =", false);
allvolume=string_to_number(config[1])-100;
musvolume=string_to_number(config[3])-100;
menuvolume=string_to_number(config[5])-100;
time_config=string_to_number(config[7])*1000;
language=config[9];
f.close();

music.load(sn+"music"+random(1, 3)+".wav"); music.volume=0;
movement.load(sn+"menu1.wav"); movement.volume=menuvolume;
enter.load(sn+"menu2.wav"); enter.volume=menuvolume;
wrap.load(sn+"menu3.wav"); wrap.volume=menuvolume;
set_sound_master_volume(allvolume);

music.play_looped();
wait(1000);
fade(music, musvolume, 25);
speak(lang.get_value("Welcome")+"!");

executing=true;
}
if(lang.set_file("Languages/"+language+".lang")==false)
{
hide_game_window();
alert("Error", "There was an error trying to open the file [Languages/"+language+".lang]. Please contact the developers to solve the problem.");
exit_pro(25, changed_settings);
}
// Open the main loop.
while(true)
{
wait(5);

// Controls with the ALT key.
if(key_down(KEY_LMENU) or key_down(KEY_RMENU))
{
if(key_pressed(KEY_F4))
break;
if(key_pressed(KEY_P))
game();
if(key_pressed(KEY_M))
main_menu();
}
else if(key_pressed(KEY_ESCAPE)) break;

// Volume controls.
if(key_down(KEY_F1))
{
musvolume--;
if(musvolume<=-100) musvolume=-100;

save_settings();
}
if(key_down(KEY_F2))
{
musvolume++;
if(musvolume>0) musvolume=0;

save_settings();
}
if(key_down(KEY_F3))
{
menuvolume--;
if(menuvolume<-100) menuvolume=-100;

save_settings();
movement.play();
}
if(key_down(KEY_F4))
{
menuvolume++;
if(menuvolume>0) menuvolume=0;

save_settings();
movement.play();
}
if(key_down(KEY_F5))
{
allvolume--;
if(allvolume<-100) allvolume=-100;

save_settings();
}
if(key_down(KEY_F6))
{
allvolume++;
if(allvolume>0) allvolume=0;

save_settings();
}

// Close the loop.
}
exit_pro(25, changed_settings);
}

// Game function: It includes the reading of the questions in the file corresponding to the configured language, an algorithm to put the answers in a random order, a verification so that they are not repeated and the menu to show the question and possible answers.
void game()
{
if(qtime.elapsed>0) qtime.restart();
menu_position=0;

f.open("Questions/"+language+".txt", "r");
lines=string_split(f.read(), "\r\n", false);

while(line1==line2)
{
line1=random(0, lines.length()-1);
}
line2=line1;

// We open and read the file with the questions, choose a line (Question) at random and verify that it is not the same as the previous one. Next we're going to mix the answers and save all the values in the matrix [options].

quest=string_split(lines[line1], "/", false);
text=quest[0];
correct=quest[1];
quest.remove_at(0);
options.resize(4);

for(x=0; x<options.length(); x++)
{
options[x]=" ";
}
while(true)
{
if(options[0]!=" "&&options[1]!=" "&&options[2]!=" "&&options[3]!=" ")
break;
y=random(0, quest.length()-1);
while(true)
{
z=random(0, 3);
if(options[z]==" ")
break;
}
options[z]=quest[y];
quest.remove_at(y);
}
question_menu=options;
options.insert_at(0, text);
f.close();

wait(500);
speak(options[0]);

// Loop of questions: It contains some commands and the menu to display the questions with their respective answers.
while(true)
{
wait(5);

// Verify that the response time has not been exceeded.
if(qtime.elapsed>=time_config)
{
dialog(lang.get_value("The "+(time_config/1000)+" seconds have run out! You have to be faster next time."));
main();
}

// Movement and verification of the menu.
if(key_pressed(KEY_UP))
{
menu_position--;
if(menu_position<0)
{
menu_position=0;
wrap.play();
}
else if(menu_position>=0)
movement.play();
speak(options[menu_position]);
}
if(key_pressed(KEY_DOWN))
{
menu_position++;
if(menu_position>=options.length())
{
menu_position=options.length()-1;
wrap.play();
}
else if(menu_position<options.length())
movement.play();
speak(options[menu_position]);
}
else if(key_pressed(KEY_RETURN))
{
enter.play();
if(menu_position!=0)
break;
}

// Commands with the ALT key.
if(key_down(KEY_LMENU) or key_down(KEY_RMENU))
{
if(key_pressed(KEY_F4))
exit_pro(25, changed_settings);
if(key_pressed(KEY_T))
speak(options[0]);
}
if(key_pressed(KEY_SPACE))
speak(options[menu_position]);
if(key_pressed(KEY_T))
speak(round((time_config-qtime.elapsed)/1000, 0)+lang.get_value(" secons remaining."));
else if(key_pressed(KEY_ESCAPE))
speak(lang.get_value("You can not leave the game!"));

// Close the loop. It is then checked whether the selected answer is correct.
}
if(options[menu_position]==correct)
dialog(lang.get_value("This reply is correct!"));
else
dialog(lang.get_value("This reply is incorrect!"));

game();
}
