#include "Includes.bgt"

void main()
{
set_error_output("Errors.log");
show_game_window(game_name+" - "+game_version+type_version);

if(executing==false)
{
if(file_exists("Settings.dat")==false)
{
pf.create("Settings.dat");
f.open("Settings.dat", "w");
f.write("Music=80
Menu=90
Languaje=English
Reflection=15");
f.close();
pf.close();
}

f.open("Settings.dat", "r");
config=string_split(f.read(), "\r\n =", false);
musvolume=(string_to_number(config[1])-100);
menuvolume=(string_to_number(config[3])-100);
languaje=config[5];
time_config=string_to_number(config[7])*1000;
f.close();

if(lang.set_file("Languajes/"+languaje+".lang")==false)
exit_pro(25, modified_sets);

music.load(sn+"music"+random(1, 3)+".wav"); music.volume=0;
movement.load(sn+"menu1.wav"); movement.volume=menuvolume;
enter.load(sn+"menu2.wav"); enter.volume=menuvolume;
wrap.load(sn+"menu3.wav"); wrap.volume=menuvolume;

music.play_looped();
wait(1000);
fade(music, musvolume, 25);
speak(lang.get_value("Welcome!"));

executing=true;
}

while(true)
{
wait(5);

if(key_down(KEY_LMENU) or key_down(KEY_RMENU))
{
if(key_pressed(KEY_F4))
break;
if(key_pressed(KEY_P))
game();
if(key_pressed(KEY_M))
main_menu();
}
else if(key_pressed(KEY_ESCAPE)) break;

if(key_down(KEY_F1))
{
musvolume--;
if(musvolume<=-100) musvolume=-100;
music.volume=musvolume;
modified_sets=true;
save_settings();
}
if(key_down(KEY_F2))
{
musvolume++;
if(musvolume>-1) musvolume=-1;
music.volume=musvolume;
modified_sets=true;
save_settings();
}
if(key_down(KEY_F3))
{
menuvolume--;
if(menuvolume<-100) menuvolume=-100;
modified_sets=true;
save_settings();

movement.volume=menuvolume;
movement.play();
}
if(key_down(KEY_F4))
{
menuvolume++;
if(menuvolume>-1) menuvolume=-1;
modified_sets=true;
save_settings();

movement.volume=menuvolume;
movement.play();
}
}
exit_pro(25, modified_sets);
}

void game()
{
if(qtime.elapsed>0) qtime.restart();
menu_position=0;


f.open("Questions/"+languaje+".txt", "r");
lines=string_split(f.read(), "\r\n", false);
quest=string_split(lines[random(0, lines.length()-1)], "/", false);
text=quest[0];
correct=quest[1];
quest.remove_at(0);
options.resize(4);

for(int x=0; x<options.length(); x++)
{
options[x]=" ";
}
while(true)
{
if(options[0]!=" "&&options[1]!=" "&&options[2]!=" "&&options[3]!=" ")
break;
y=random(0, quest.length()-1);
z;
while(true)
{
z=random(0, 3);
if(options[z]==" ")
break;
}
options[z]=quest[y];
quest.remove_at(y);
}
question_menu=options;
options.insert_at(0, text);
f.close();

speak(options[0]);
wait(500);

while(true)
{
wait(10);

if(qtime.elapsed>=time_config)
{
dialog(lang.get_value("The "+(time_config/1000)+" seconds have run out! You have to be faster next time."));
main();
}

if(key_pressed(KEY_UP))
{
menu_position--;
if(menu_position<0)
{
menu_position=0;
wrap.play();
}
else if(menu_position>=0)
movement.play();
speak(options[menu_position]);
}
if(key_pressed(KEY_DOWN))
{
menu_position++;
if(menu_position>=options.length())
{
menu_position=options.length()-1;
wrap.play();
}
else if(menu_position<options.length())
movement.play();
speak(options[menu_position]);
}
else if(key_pressed(KEY_RETURN))
{
enter.play();
if(menu_position!=0)
break;
}

if(key_down(KEY_LMENU) or key_down(KEY_RMENU))
{
if(key_pressed(KEY_F4))
exit_pro(25, modified_sets);
if(key_pressed(KEY_T))
speak(options[0]);
}
if(key_pressed(KEY_SPACE))
speak(options[menu_position]);
if(key_pressed(KEY_T))
speak(round((time_config-qtime.elapsed)/1000, 0)+lang.get_value(" secons remaining."));
else if(key_pressed(KEY_ESCAPE))
speak(lang.get_value("You can not leave the game!"));
}
if(options[menu_position]==correct)
dialog(lang.get_value("This reply is correct!"));
else
dialog(lang.get_value("This reply is incorrect."));
game();
}
